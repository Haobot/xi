<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="Xi - Board %&apos;boardID&apos; IPAddress/Port: %&apos;ipAddress&apos; : %&apos;port&apos;" type="command" category="control"><comment x="0" y="0" w="276" collapsed="false">Select the Board Number, its IP address and IP port number. &#xD;&#xD;The port number must match that set for the associated XiServer.&#xD;&#xD;</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%txt">localhost</input><input type="%txt">1234</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>ipAddress</l><l>port</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                       setBoardIpAddress1&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;    function noServerAlert() {&#xD;        alert(&apos;Server not responding. Did you start XiServer for board &apos; +&#xD;            boardID + &apos;? Start the server, reload this page and try again&apos;);&#xD;    }&#xD;&#xD;&#xD;    if (window.xi_beenHereDoneThat === undefined || window.xi_beenHereDoneThat === false) {&#xD;        if (window.xi_debugLevel &gt;= 0) {&#xD;            console.log(&apos;Globals defined&apos;);&#xD;        }&#xD;        // 0 = no debug&#xD;        // 1 = low level debug&#xD;        // 2 = high - open the floodgates&#xD;        // Variable is set by user through a Scratch command block&#xD;        window.xi_debugLevel = 0;&#xD;&#xD;        // Board IP addresses and ports are set by the user with a Scratch command block, and the information&#xD;        // is stored in the WebSocket Array&#xD;&#xD;        // WebSocket array&#xD;        //   Each board will have an associated WebSocket instance used for communication&#xD;        //   with the Xi client. webSocketsArray is an array of objects. Each object has a format of:&#xD;        //   {id: BoardID, , ip: IPAddress, port: port, ws: WebSocketReference}&#xD;&#xD;        window.xi_webSocketsArray = [];&#xD;&#xD;        // Sensor Data Array&#xD;        // This is an array of objects that store the latest sensor or switch value updates received from all Xi servers.&#xD;        // The object format is:&#xD;        //      key:      generated by genReporterKey()&#xD;        //      value:    latest updated value&#xD;        // A key is used to uniquely identify each data entry with a specific sensor on a specific server&#xD;        window.xi_sensorDataArray = [];&#xD;&#xD;        window.xi_beenHereDoneThat = true;&#xD;    }&#xD;    else {&#xD;        if (window.xi_debugLevel &gt;= 0) {&#xD;                console.log(&apos;Globals previously defined&apos;);&#xD;         }&#xD;    }&#xD;&#xD;    /*****************************************************************************************************/&#xD;    /***********************************   Scratch Program Block Handlers, ******************************/&#xD;    /*****************************************************************************************************/&#xD;&#xD;    // Associate a handler for each block described in the blocks section below&#xD;&#xD;    /*******************************&#xD;     **** Command Block Handlers ****&#xD;     *******************************/&#xD;&#xD;    // Accepts IP Address and Port information for each board that the user adds&#xD;    // The associated scratch block is a &apos;wait&apos; command block.&#xD;    // We don&apos;t want Scratch to continue until the socket is open bidirectionally.&#xD;    // When socket.onopen is called the callback is returned so that scratch can proceed processing&#xD;&#xD;    var timeoutID; // need to set a timeout when a socket is created because we are using a &apos;wait&apos; block&#xD;&#xD;&#xD;    if (window.xi_debugLevel &gt;= 1)&#xD;        console.log(&apos;setBoard: &apos; + boardID, ipAddress, port);&#xD;&#xD;    // Check to make sure that this board was not entered previously&#xD;    for (var index = 0; index &lt; window.xi_webSocketsArray.length; index++) {&#xD;        if (window.xi_webSocketsArray[index].id === boardID) {&#xD;            // allow user to reset the board to the same value - for stop and start&#xD;            if ((window.xi_webSocketsArray[index].ip === ipAddress) &amp;&amp; (window.xi_webSocketsArray[index].port === port)) {&#xD;                //alert(&apos;An IP entry already exists for board &apos; + boardID + &apos;!&apos;);&#xD;                return; // no need to go further&#xD;            }&#xD;        }&#xD;    }&#xD;&#xD;&#xD;    // This is a confirmed unique entry. Create a websocket for this board&#xD;    var socket = new WebSocket(&apos;ws://&apos; + ipAddress + &apos;:&apos; + port);&#xD;&#xD;&#xD;&#xD;    // add the entry including the websocket reference just created&#xD;    window.xi_webSocketsArray.push({&apos;id&apos;: boardID, &apos;ip&apos;: ipAddress, &apos;port&apos;: port, &apos;ws&apos;: socket});&#xD;&#xD;    if (window.xi_debugLevel &gt;= 1) {&#xD;    console.log(&apos;Number of entries in webSocketsArray: &apos; + window.xi_webSocketsArray.length);&#xD;    }&#xD;&#xD;    // start the timer for a server reply - we wait for up to 2 seconds for the reply&#xD;    timeoutID = window.setTimeout(noServerAlert, 2000);&#xD;&#xD;// attach an onopen handler to this socket. This message is sent by a servers websocket&#xD;    socket.onopen = function (event) {&#xD;        window.clearTimeout(timeoutID);&#xD;&#xD;        if (window.xi_debugLevel &gt;= 1)&#xD;            console.log(&apos;onopen message received&apos;);&#xD;        // how many boards are attached&#xD;&#xD;        socket.send(&apos;Xi4sOnline&apos;);&#xD;&#xD;    };&#xD;&#xD;&#xD;&#xD;</l></block><list><block var="boardID"/><block var="ipAddress"/><block var="port"/></list></block><block s="doWait"><l>1</l></block><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>port</l><l>ipAddress</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                       setBoardIpAddress2&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD; var socket;&#xD;&#xD;    // find the socket&#xD;    for (var index = 0; index &lt; window.xi_webSocketsArray.length; index++) {&#xD;        if (window.xi_webSocketsArray[index].id === boardID) {&#xD;            // allow user to reset the board to the same value - for stop and start&#xD;            if ((window.xi_webSocketsArray[index].ip === ipAddress) &amp;&amp; (window.xi_webSocketsArray[index].port === port)) {&#xD;&#xD;                socket = window.xi_webSocketsArray[index].ws ;&#xD;                console.log("socket found") ;&#xD;            }&#xD;        }&#xD;    }&#xD;&#xD;    /**********************  websocket &apos;onmessage&apos; handler *************************************/&#xD;        //&#xD;        // All messages sent from board&apos;s socket are handled here.&#xD;        // Attach an onmessage event handler to this socket.&#xD;        // Process messages received from the server associated with this socket.&#xD;    socket.onmessage = function (message) {&#xD;        if (window.xi_debugLevel === 1)&#xD;            console.log(&apos;onmessage received: &apos; + message.data);&#xD;&#xD;        // All message components are delimited with &apos;/&apos; character.&#xD;        // TODO: Should this be done with JSON?&#xD;&#xD;        // Incoming messages are split into their component pieces and placed into a &apos;msg&apos; array&#xD;        // msg[0] for each message is the message ID.&#xD;        var msg = message.data.split(&apos;/&apos;);&#xD;&#xD;        // process each message ID&#xD;        switch (msg[0]) {&#xD;            // dataUpdate - server data update data message&#xD;            case &apos;dataUpdate&apos;:&#xD;                var index = msg[1]; // unique value used as an index into xi_sensorDataArray&#xD;                var data = msg[2]; // data value to be entered into xi_sensorDataArray&#xD;                if (window.xi_debugLevel &gt;= 2)&#xD;                    console.log(&apos;sensorData: index = &apos; + index + &apos; data = &apos; + data);&#xD;                // update the array with the new value&#xD;                window.xi_sensorDataArray[index].value = data;&#xD;                break;&#xD;&#xD;        /***************************************&#xD;         ************** server detected errors&#xD;         ****************************************/&#xD;&#xD;            // server detected a problem in setting the mode of this pin&#xD;            case &apos;invalidSetMode&apos;:&#xD;                alert(msg[1]);&#xD;                break;&#xD;            case &apos;invalidPinCommand&apos;:&#xD;                alert(msg[1]);&#xD;                break;&#xD;            default:&#xD;                if (window.xi_debugLevel &gt;= 1)&#xD;                    console.log(&apos;onmessage unknown message received&apos;);&#xD;        }&#xD;    };&#xD;&#xD;    /**********************  websocket &apos;onmessage&apos; handler *************************************/&#xD;        //&#xD;        // All messages sent from board&apos;s socket are handled here.&#xD;        // Attach an onmessage event handler to this socket.&#xD;        // Process messages received from the server associated with this socket.&#xD;    socket.onmessage = function (message) {&#xD;        if (window.xi_debugLevel === 1)&#xD;            console.log(&apos;onmessage received: &apos; + message.data);&#xD;&#xD;        // All message components are delimited with &apos;/&apos; character.&#xD;        // TODO: Should this be done with JSON?&#xD;&#xD;        // Incoming messages are split into their component pieces and placed into a &apos;msg&apos; array&#xD;        // msg[0] for each message is the message ID.&#xD;        var msg = message.data.split(&apos;/&apos;);&#xD;&#xD;        // process each message ID&#xD;        switch (msg[0]) {&#xD;            // dataUpdate - server data update data message&#xD;            case &apos;dataUpdate&apos;:&#xD;                var index = msg[1]; // unique value used as an index into xi_sensorDataArray&#xD;                var data = msg[2]; // data value to be entered into xi_sensorDataArray&#xD;                if (window.xi_debugLevel &gt;= 2)&#xD;                    console.log(&apos;sensorData: index = &apos; + index + &apos; data = &apos; + data);&#xD;                // update the array with the new value&#xD;                window.xi_sensorDataArray[index].value = data;&#xD;                break;&#xD;&#xD;        /***************************************&#xD;         ************** server detected errors&#xD;         ****************************************/&#xD;&#xD;            // server detected a problem in setting the mode of this pin&#xD;            case &apos;invalidSetMode&apos;:&#xD;                alert(msg[1]);&#xD;                break;&#xD;            case &apos;invalidPinCommand&apos;:&#xD;                alert(msg[1]);&#xD;                break;&#xD;            default:&#xD;                if (window.xi_debugLevel &gt;= 1)&#xD;                    console.log(&apos;onmessage unknown message received&apos;);&#xD;        }&#xD;    };</l></block><list><block var="boardID"/><block var="port"/><block var="ipAddress"/></list></block></script><scripts><script x="316.6855498749999" y="32.000003000000106"><block var="ipAddress"/></script></scripts></block-definition><block-definition s="Xi - Set Debug Level %&apos;level&apos;" type="command" category="control"><comment x="0" y="0" w="340" collapsed="false">Set The Debug Level&#xD;&#xD;Debug messages will appear in the JavaScript console of your browser&#xD;&#xD;0 selects the least amount of debug messages displayed&#xD;&#xD;2 selects the most amount of debug messages diplayed</comment><header></header><code></code><inputs><input type="%s" readonly="true">0<options>0
1
2</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>level</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                        setDebugLevel&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;&#xD;    if (window.xi_beenHereDoneThat === undefined || window.xi_beenHereDoneThat === false) {&#xD;        if (window.xi_debugLevel &gt;= 0) {&#xD;            console.log(&apos;Globals defined&apos;);&#xD;        }&#xD;&#xD;        // 0 = no debug&#xD;        // 1 = low level debug&#xD;        // 2 = high - open the floodgates&#xD;        // Variable is set by user through a Scratch command block&#xD;        window.xi_debugLevel = 0;&#xD;&#xD;        // Board IP addresses and ports are set by the user with a Scratch command block, and the information&#xD;        // is stored in the WebSocket Array&#xD;&#xD;        // WebSocket array&#xD;        //   Each board will have an associated WebSocket instance used for communication&#xD;        //   with the Xi client. webSocketsArray is an array of objects. Each object has a format of:&#xD;        //   {id: BoardID, , ip: IPAddress, port: port, ws: WebSocketReference}&#xD;&#xD;        window.xi_webSocketsArray = [];&#xD;&#xD;        // Sensor Data Array&#xD;        // This is an array of objects that store the latest sensor or switch value updates received from all Xi servers.&#xD;        // The object format is:&#xD;        //      key:      generated by genReporterKey()&#xD;        //      value:    latest updated value&#xD;        // A key is used to uniquely identify each data entry with a specific sensor on a specific server&#xD;        window.xi_sensorDataArray = [];&#xD;&#xD;        window.xi_beenHereDoneThat = true;&#xD;&#xD;    }&#xD;    else {&#xD;        if (window.xi_debugLevel &gt;= 0) {&#xD;            console.log("Globals Previously Defined");&#xD;        }&#xD;    }&#xD;&#xD;    window.xi_debugLevel = level;&#xD;&#xD;    if (window.xi_debugLevel &gt;= 0) {&#xD;        console.log(&apos;Debug Level Set to &apos; + window.xi_debugLevel);&#xD;    }&#xD;</l></block><list><block var="level"/></list></block></script></block-definition><block-definition s="Xi - Board %&apos;boardID&apos; Set Pin %&apos;pin&apos; as %&apos;mode&apos;" type="command" category="control"><comment x="0" y="0" w="434" collapsed="false">This block allow the user to set the pin mode.</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%n">2</input><input type="%txt" readonly="true">Digital Input<options>Digital Input
Digital Output
Analog Sensor Input
Analog (PWM) Output</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>pin</l><l>mode</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                          setPinMode&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;&#xD;//genReporterKey&#xD;// Input: Board number&#xD;//        Pin number&#xD;//        Designator to differentiate between analog and digital - either &apos;a&apos; or &apos;d&apos;&#xD;//&#xD;// Returns the generated key&#xD;function genReporterKey(boardNum, pinNum, designator) {&#xD;    if (window.xi_debugLevel &gt;= 1)&#xD;        console.log(&apos;genReporterKey returns: &apos; + boardNum + designator + pinNum);&#xD;    return boardNum + designator + pinNum;&#xD;}&#xD;&#xD;function sendSetInputPinRequest(msgToServer, analogOrDigital, board, pin, wsIndex) {&#xD;    var reporterArrayEntry = {key: null, data: -1}; // The entry we build to add to the xi_sensorDataArray&#xD;&#xD;    // generate a key so that we can use to retrieve the data from the reporterArrayEntry&#xD;    reporterArrayEntry.key = genReporterKey(board, pin, analogOrDigital);&#xD;&#xD;    if (window.xi_debugLevel &gt;= 1)&#xD;        console.log(&apos;sendInputPinRequest generated key = &apos; + reporterArrayEntry.key);&#xD;&#xD;    var found = false;&#xD;    // make sure that this is a unique key in the array&#xD;    for (var index = 0; index &lt; window.xi_sensorDataArray.length; index++) {&#xD;        if (window.xi_sensorDataArray[index].key === reporterArrayEntry.key) {&#xD;            found = true;&#xD;            console.log("sendInputPinReq entry exists");&#xD;        }&#xD;    }&#xD;&#xD;&#xD;    // it is unique so go ahead and add the record to the array&#xD;    if (found === false) {&#xD;        window.xi_sensorDataArray.push(reporterArrayEntry);&#xD;        //}&#xD;        // now we can safely send the set pin message to the Xi Server to create the device&#xD;        if (window.xi_debugLevel &gt;= 1)&#xD;            console.log(&apos;sendInputPinRequest: msg = &apos; + msgToServer + &apos; index = &apos; + wsIndex);&#xD;        window.xi_webSocketsArray[wsIndex].ws.send(msgToServer);&#xD;    }&#xD;}&#xD;&#xD;&#xD;if( window.xi_beenHereDoneThat === undefined)&#xD;{&#xD;    alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");&#xD;}&#xD;&#xD;&#xD;// Set the pin mode command block handler&#xD;&#xD;    if (window.xi_debugLevel &gt;= 1)&#xD;        console.log(&apos;Set Pin Mode - board: &apos; + boardID + &apos; Mode: &apos; + mode + &apos; Pin: &apos; + pin);&#xD;    // make sure the websocket for the board was previously established&#xD;    for (var index = 0; index &lt; window.xi_webSocketsArray.length; index++) {&#xD;        if (window.xi_webSocketsArray[index].id === boardID) {&#xD;            // send message to server to create device(input devices) or set the pin mode (output device)&#xD;            var messageToServer; // message to be sent to server&#xD;&#xD;            // the mode is the value prescribed in block descriptor section&#xD;            switch (mode) {&#xD;                // set pin to digital input mode&#xD;                // msg: setDigitalIN - digital service input&#xD;                case &apos;Digital Input&apos;:&#xD;                    if (window.xi_debugLevel &gt;= 1)&#xD;                        console.log(&apos;pin mode digital input&apos;);&#xD;                    // build the message to send to the Xi Server&#xD;                    // we use the length of the array as the index/device id&#xD;                    messageToServer = &apos;setDigitalIN/&apos; + boardID + &apos;/&apos; + pin + &apos;/&apos; + window.xi_sensorDataArray.length;&#xD;                    sendSetInputPinRequest(messageToServer, &apos;d&apos;, boardID, pin, index);&#xD;                    break;&#xD;                // set pin to digital out&#xD;                // msg: setDigitalOUT&#xD;                case &apos;Digital Output&apos;:&#xD;&#xD;                    if (window.xi_debugLevel &gt;= 1)&#xD;                        console.log(&apos;pin mode digital output&apos;);&#xD;                    messageToServer = &apos;setDigitalOUT/&apos; + boardID + &apos;/&apos; + pin;&#xD;                    if (window.xi_debugLevel &gt;= 2)&#xD;                        console.log(&apos;pinMode Digital Out Msg to server: &apos; + messageToServer);&#xD;                    window.xi_webSocketsArray[index].ws.send(messageToServer);&#xD;                    break;&#xD;                // set pin to analog in&#xD;                // msg: setAnalogIN&#xD;                case &apos;Analog Sensor Input&apos;:&#xD;                    if (window.xi_debugLevel &gt;= 1)&#xD;                        console.log(&apos;pin mode analog input&apos;);&#xD;                    // build the message to send to the Xi Server&#xD;                    // we use the length of the array as the index/device id&#xD;                    messageToServer = &apos;setAnalogIN/&apos; + window.xi_sensorDataArray.length + &apos;/&apos; + boardID + &apos;/&apos; + pin;&#xD;                    sendSetInputPinRequest(messageToServer, &apos;a&apos;, boardID, pin, index);&#xD;                    break;&#xD;                // set pin mode PWM&#xD;                // msg: setAnalogOUT&#xD;                case &apos;Analog (PWM) Output&apos;:&#xD;                    if (window.xi_debugLevel &gt;= 1)&#xD;                        console.log(&apos;pin mode PWM&apos;);&#xD;                    // send out the pwm mode message&#xD;                    // the host tests if the pin is PWM and if not will send back an &apos;xp&apos; message&#xD;                    messageToServer = &apos;setAnalogOUT/&apos; + boardID + &apos;/&apos; + pin;&#xD;                    if (window.xi_debugLevel &gt;= 2)&#xD;                        console.log(&apos;pinMode PWM Out Msg to server: &apos; + messageToServer);&#xD;                    window.xi_webSocketsArray[index].ws.send(messageToServer);&#xD;                    break;&#xD;                default:&#xD;                    if (window.xi_debugLevel &gt;= 1)&#xD;                        console.log(&apos;ext.pinMode: Unknown mode - &apos;, +mode);&#xD;            }&#xD;            // just return from here after processing the command&#xD;            return;&#xD;        }&#xD;    }&#xD;    // board not yet established&#xD;    alert(&apos;Board &apos; + boardID + &apos; IP address must be set before a board is used&apos;);&#xD;</l></block><list><block var="boardID"/><block var="pin"/><block var="mode"/></list></block></script></block-definition><block-definition s="Xi - Board %&apos;boardID&apos; Digital Write Pin %&apos;pin&apos; = %&apos;value&apos;" type="command" category="control"><comment x="0" y="0" w="318" collapsed="false">Set a digital pin to High or Low (On or Off)</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%n">2</input><input type="%txt" readonly="true">Off<options>Off
On</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>pin</l><l>value</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                        digitalWrite&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;    // This function will check to see if a board has been established and if it has, will send a command&#xD;    // message to the server&#xD;function sendCommand(msg, board, type) {&#xD;    if (window.xi_debugLevel &gt;= 1) {&#xD;        console.log(&apos;sendCommand: &apos; + msg + &apos; &apos; + board + &apos; &apos; + type);&#xD;    }&#xD;    for (var index = 0; index &lt; window.xi_webSocketsArray.length; index++) {&#xD;        if (window.xi_webSocketsArray[index].id === board) {&#xD;            if (window.xi_debugLevel &gt;= 2)&#xD;                console.log(&apos;sendCommand: Message: &apos; + msg + &apos; board: &apos; + board);&#xD;            // send out message&#xD;            window.xi_webSocketsArray[index].ws.send(msg);&#xD;            return;&#xD;        }&#xD;    }&#xD;    // board was not established&#xD;    alert(type + &apos; IP address for board &apos; + boardID + &apos; was not set&apos;);&#xD;}&#xD;&#xD;&#xD; if( window.xi_beenHereDoneThat === undefined)&#xD; {&#xD;     alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");&#xD; }&#xD;&#xD;&#xD;&#xD;if (window.xi_debugLevel &gt;= 1) {&#xD;    console.log(&apos;digitalWrite Board: &apos; + boardID + &apos; Pin &apos; + pin + &apos; Value &apos; + value);&#xD;}&#xD;var msg = &apos;digitalWrite/&apos; + boardID + &apos;/&apos; + pin + &apos;/&apos; + value;&#xD;sendCommand(msg, boardID, &apos;digitalWrite&apos;);</l></block><list><block var="boardID"/><block var="pin"/><block var="value"/></list></block></script></block-definition><block-definition s="Xi - Board %&apos;boardID&apos; Analog Write (PWM) Pin %&apos;pin&apos; = %&apos;value&apos;" type="command" category="control"><comment x="0" y="0" w="354" collapsed="false">Set the output value for a PWM pin. The range of values is from 0 to 255.</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%n">3</input><input type="%n">128</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>pin</l><l>value</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                          analogWrite&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;&#xD;function sendCommand(msg, board, type) {&#xD;    if (window.xi_debugLevel &gt;= 1) {&#xD;        console.log(&apos;sendCommand: &apos; + msg + &apos; &apos; + board + &apos; &apos; + type);&#xD;    }&#xD;    for (var index = 0; index &lt; window.xi_webSocketsArray.length; index++) {&#xD;        if (window.xi_webSocketsArray[index].id === board) {&#xD;            if (window.xi_debugLevel &gt;= 2)&#xD;                console.log(&apos;sendCommand: Message: &apos; + msg + &apos; board: &apos; + board);&#xD;            // send out message&#xD;            window.xi_webSocketsArray[index].ws.send(msg);&#xD;            return;&#xD;        }&#xD;    }&#xD;    // board was not established&#xD;    alert(type + &apos; IP address for board &apos; + boardID + &apos; was not set&apos;);&#xD;}&#xD;&#xD; if( window.xi_beenHereDoneThat === undefined)&#xD; {&#xD;     alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");&#xD; }&#xD;&#xD;var msg = &apos;analogWrite/&apos; + boardID + &apos;/&apos; + pin + &apos;/&apos; + value;&#xD;sendCommand(msg, boardID, &apos;analogWrite&apos;);</l></block><list><block var="boardID"/><block var="pin"/><block var="value"/></list></block></script></block-definition><block-definition s="Xi - Board %&apos;boardID&apos; Analog Sensor Input On Pin %&apos;pin&apos;" type="reporter" category="sensing"><comment x="0" y="0" w="346" collapsed="false">This reporter block reports the value of an analog input pin. Range of values is from 0 to 1023.</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%n">2</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>pin</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                         analogRead&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;// Using the supplied key, this function will retrieve the latest data from the sensorDataArray.&#xD;function retrieveReporterData(board, pin, key) {&#xD;    // make sure that this is a unique key in the array&#xD;    for (var index = 0; index &lt; window.xi_sensorDataArray.length; index++) {&#xD;        if (window.xi_sensorDataArray[index].key === key) {&#xD;            return window.xi_sensorDataArray[index].value&#xD;        }&#xD;    }&#xD;    // did not find an entry in the array&#xD;    alert(&apos;Did you set the pin mode for Board &apos; + board + &apos; Pin &apos; + pin +&#xD;             &apos;? No entry for this block in database&apos;);&#xD;}&#xD;&#xD;&#xD;&#xD;&#xD; //genReporterKey&#xD;     // Input: Board number&#xD;     //        Pin number&#xD;     //        Designator to differentiate between analog and digital - either &apos;a&apos; or &apos;d&apos;&#xD;     //&#xD;     // Returns the generated key&#xD; function genReporterKey(boardNum, pinNum, designator) {&#xD;     if (window.xi_debugLevel &gt;= 1) {&#xD;         console.log(&apos;genReporterKey returns: &apos; + boardNum + designator + pinNum);&#xD;     }&#xD;     return boardNum + designator + pinNum;&#xD;}&#xD;&#xD;&#xD;&#xD; var rVal;&#xD;&#xD;  if( window.xi_beenHereDoneThat === undefined)&#xD;  {&#xD;      alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");&#xD;  }&#xD;&#xD; if (window.xi_debugLevel &gt;= 1)&#xD; {&#xD;    console.log(&apos;Analog Input - board: &apos; + boardID + &apos; Pin: &apos; + pin);&#xD; }&#xD;&#xD;&#xD;  var key = genReporterKey(boardID, pin, &apos;a&apos;);&#xD;  rVal = retrieveReporterData(boardID, pin, key);&#xD;  if( rVal === undefined) {&#xD;     rVal = 0;&#xD;  }&#xD;  if( window.xi_debugLevel &gt;= 1) {&#xD;    console.log("Analog Read returns: " + rVal) ;&#xD;  }&#xD;  return rVal;</l></block><list><block var="boardID"/><block var="pin"/></list></block></script><list></list></block><list></list></block></block></script></block-definition><block-definition s="Xi - Board %&apos;boardID&apos; Digital Input On Pin %&apos;pin&apos;" type="reporter" category="sensing"><comment x="0" y="0" w="781" collapsed="false">This reporter block reports the state of a digial input pin (1 or 0).</comment><header></header><code></code><inputs><input type="%n" readonly="true">1<options>1
2
3
4
5
6
7
8
9
10</options></input><input type="%n">2</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reifyScript"><script><block s="doRun"><block s="reportJSFunction"><list><l>boardID</l><l>pin</l></list><l>/*********************************************************************************************&#xD; *&#xD; *                                     * * * Xi4Snap * * *&#xD; *&#xD; *                                         digitalRead&#xD; *&#xD; *&#xD; *&#xD; *********************************************************************************************&#xD; * Created by afy on 9/21/14.&#xD; *&#xD; * This is the Xi Client for Snap!&#xD; *&#xD; * Version v.001&#xD; *&#xD; *&#xD; * @author: Alan Yorinks&#xD; Copyright (c) 2014 Alan Yorinks All right reserved.&#xD;&#xD; This program is free software; you can redistribute it and/or&#xD; modify it under the terms of the GNU General Public&#xD; License as published by the Free Software Foundation; either&#xD; version 3.0 of the License, or (at your option) any later version.&#xD;&#xD; This library is distributed in the hope that it will be useful,&#xD; but WITHOUT ANY WARRANTY; without even the implied warranty of&#xD; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU&#xD; Lesser General Public License for more details.&#xD;&#xD; You should have received a copy of the GNU General Public&#xD; License along with this library; if not, write to the Free Software&#xD; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA&#xD; *&#xD; */&#xD;&#xD;// Using the supplied key, this function will retrieve the latest data from the sensorDataArray.&#xD;function retrieveReporterData(board, pin, key) {&#xD;    // make sure that this is a unique key in the array&#xD;    for (var index = 0; index &lt; window.xi_sensorDataArray.length; index++) {&#xD;        if (window.xi_sensorDataArray[index].key === key) {&#xD;            return window.xi_sensorDataArray[index].value&#xD;        }&#xD;    }&#xD;    // did not find an entry in the array&#xD;    alert(&apos;Did you set the pin mode for Board &apos; + board + &apos; Pin &apos; + pin +&#xD;             &apos;? No entry for this block in database&apos;);&#xD;}&#xD;&#xD;&#xD;&#xD;&#xD; //genReporterKey&#xD;     // Input: Board number&#xD;     //        Pin number&#xD;     //        Designator to differentiate between analog and digital - either &apos;a&apos; or &apos;d&apos;&#xD;     //&#xD;     // Returns the generated key&#xD; function genReporterKey(boardNum, pinNum, designator) {&#xD;     if (window.xi_debugLevel &gt;= 1) {&#xD;         console.log(&apos;genReporterKey returns: &apos; + boardNum + designator + pinNum);&#xD;     }&#xD;     return boardNum + designator + pinNum;&#xD;}&#xD;&#xD;&#xD;&#xD; var rVal;&#xD;&#xD;  if( window.xi_beenHereDoneThat === undefined)&#xD;  {&#xD;      alert("The first block of Xi script must be either a Set Debug Level or Set IPAddress block.");&#xD;  }&#xD;&#xD; if (window.xi_debugLevel &gt;= 1)&#xD; {&#xD;    console.log(&apos;Digital Input - board: &apos; + boardID + &apos; Pin: &apos; + pin);&#xD; }&#xD;&#xD;&#xD;  var key = genReporterKey(boardID, pin, &apos;d&apos;);&#xD;&#xD;  rVal = retrieveReporterData(boardID, pin, key);&#xD;    if( rVal === undefined) {&#xD;       rVal = 0;&#xD;    }&#xD;  if( window.xi_debugLevel &gt;= 1) {&#xD;    console.log("Digital Read returns: " + rVal) ;&#xD;  }&#xD;  return rVal;</l></block><list><block var="boardID"/><block var="pin"/></list></block></script><list></list></block><list></list></block></block></script></block-definition></blocks>